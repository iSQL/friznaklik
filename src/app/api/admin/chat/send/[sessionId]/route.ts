// src/app/api/admin/chat/send/[sessionId]/route.ts

import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';

// Helper function to check if the authenticated user is an admin
// TODO: Consider moving this to a shared utility file (e.g., /lib/authUtils.ts)
async function isAdminUser(userId: string): Promise<boolean> {
  console.log('[isAdminUser] Checking role for userId:', userId);
  if (!userId) return false;

  try {
    const dbUser = await prisma.user.findUnique({
      where: { clerkId: userId },
      select: { role: true },
    });
    console.log('[isAdminUser] DB user found:', dbUser);
    return dbUser?.role === 'admin';
  } catch (error) {
    console.error('[isAdminUser] Error fetching user role:', error);
    return false;
  }
}

// Handles POST requests to /api/admin/chat/send/:sessionId
// Allows an admin to send a message to a specific chat session.
export async function POST(
  request: Request,
  { params }: { params: { sessionId: string } } // Destructure 'sessionId' from params
) {

  // 1. Authentication
  const { userId } = await auth(); 

  if (!userId) {
    console.log(`POST /api/admin/chat/send/[sessionId]: User not authenticated, returning 401`);
    return new NextResponse('Unauthorized', { status: 401 });
  }

  // 2. Get sessionId from params
  const sessionId = params.sessionId; 

  if (!sessionId) {
    // This case should ideally not be hit if the route is matched correctly by Next.js.
    console.log(`POST /api/admin/chat/send/[sessionId]: Session ID is missing from params`);
    return new NextResponse('Bad Request: Invalid Session ID in URL', { status: 400 });
  }

  console.log(`POST /api/admin/chat/send/${sessionId}: Request received for ID`);
  console.log(`POST /api/admin/chat/send/${sessionId}: Clerk userId:`, userId);

  // 3. Authorization (Admin Check)
  const isAdmin = await isAdminUser(userId);
  if (!isAdmin) {
    console.log(`POST /api/admin/chat/send/${sessionId}: User is not admin, returning 403`);
    return new NextResponse('Forbidden', { status: 403 });
  }

  console.log(`POST /api/admin/chat/send/${sessionId}: User is admin. Proceeding to send message.`);


  // 4. Parse Request Body & Validate Message
  let messageText: string;
  try {
      const body = await request.json();
      messageText = (body as { message?: string }).message ?? ''; 

      if (!messageText || typeof messageText !== 'string' || messageText.trim() === '') {
          console.log(`POST /api/admin/chat/send/${sessionId}: Invalid or empty message in request body`);
          return new NextResponse('Bad Request: Message text is required and cannot be empty.', { status: 400 });
      }
       console.log(`POST /api/admin/chat/send/${sessionId}: Received message text: "${messageText}"`);
  } catch (error) {
      console.error(`POST /api/admin/chat/send/${sessionId}: Error parsing request body:`, error);
      return new NextResponse('Bad Request: Invalid JSON body.', { status: 400 });
  }

  // 5. Data Creation (Save Admin Message)
  try {
      // First, verify the chat session exists
      const chatSessionExists = await prisma.chatSession.findUnique({
          where: { id: sessionId },
          select: { id: true } // Only need to check existence
      });

      if (!chatSessionExists) {
          console.log(`POST /api/admin/chat/send/${sessionId}: Chat session not found`);
          return new NextResponse('Not Found: Chat session not found', { status: 404 });
      }

      // Create the new message with sender set to 'admin'
      const newAdminMessage = await prisma.chatMessage.create({
          data: {
              sessionId: sessionId,
              sender: 'admin', // Set sender explicitly
              message: messageText.trim(), // Trim whitespace
              timestamp: new Date(),
              // id will be auto-generated by Prisma based on schema (cuid)
              // isReadByAdmin is not relevant for admin messages
          }
      });

      console.log(`POST /api/admin/chat/send/${sessionId}: Admin message saved successfully:`, newAdminMessage);

      // 6. Response
      // Return the newly created message object
      return NextResponse.json(newAdminMessage, { status: 201 }); // 201 Created

  } catch (error) {
      console.error(`POST /api/admin/chat/send/${sessionId}: Error saving admin message:`, error);
      // Check if it's a Prisma error (e.g., foreign key constraint if session ID was invalid despite earlier check)
      if (error instanceof Error && (error as any).code?.startsWith('P')) { // Basic check for Prisma error codes
        console.error(`POST /api/admin/chat/send/${sessionId}: Prisma error:`, (error as any).code, (error as any).meta);
      }
      return new NextResponse('Internal Server Error', { status: 500 });
  }
}
