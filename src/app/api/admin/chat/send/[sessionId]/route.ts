// src/app/api/admin/chat/send/[sessionId]/route.ts

import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { isAdminUser } from '@/lib/authUtils'; // Import the centralized isAdminUser function

// Handles POST requests to /api/admin/chat/send/:sessionId
// Allows an admin to send a message to a specific chat session.
// Uses URL parsing to get the sessionId
export async function POST(
  request: Request
  // Removed second argument: { params }: { params: { sessionId: string } }
) {

  // 1. Authentication & Authorization
  const { userId } = await auth(); // Use await for auth()

  if (!userId) {
    // Logged out before extracting sessionId
    console.log(`POST /api/admin/chat/send/[sessionId]: User not authenticated, returning 401`);
    return new NextResponse('Unauthorized', { status: 401 });
  }

  // Extract sessionId from the URL path
  let sessionId: string | undefined;
  try {
      const url = new URL(request.url);
      // Example URL: /api/admin/chat/send/some-session-id
      // Split by '/' -> ['', 'api', 'admin', 'chat', 'send', 'some-session-id']
      // The ID should be the last element
      sessionId = url.pathname.split('/').pop(); // Use pop() to get the last segment
  } catch (urlError) {
       console.error('POST /api/admin/chat/send/[sessionId]: Error parsing request URL:', urlError);
       return new NextResponse('Internal Server Error', { status: 500 });
  }

   // 2. Validate sessionId
  if (!sessionId) {
      console.log(`POST /api/admin/chat/send/[sessionId]: Missing or could not parse sessionId from URL`);
      return new NextResponse('Bad Request: Invalid Session ID in URL', { status: 400 });
  }

  console.log(`POST /api/admin/chat/send/${sessionId}: Request received for ID`);
  console.log(`POST /api/admin/chat/send/${sessionId}: Clerk userId:`, userId);


  const isAdmin = await isAdminUser(userId);
  if (!isAdmin) {
    console.log(`POST /api/admin/chat/send/${sessionId}: User is not admin, returning 403`);
    return new NextResponse('Forbidden', { status: 403 });
  }

  console.log(`POST /api/admin/chat/send/${sessionId}: User is admin. Proceeding to send message.`);


  // 3. Parse Request Body & Validate Message
  let messageText: string;
  try {
      const body = await request.json();
      // Add type assertion if necessary, or define an interface for the body
      messageText = (body as { message?: string }).message ?? ''; // Use optional chaining and nullish coalescing

      if (!messageText || typeof messageText !== 'string' || messageText.trim() === '') {
          console.log(`POST /api/admin/chat/send/${sessionId}: Invalid or empty message in request body`);
          return new NextResponse('Bad Request: Message text is required and cannot be empty.', { status: 400 });
      }
       console.log(`POST /api/admin/chat/send/${sessionId}: Received message text: "${messageText}"`);
  } catch (error) {
      console.error(`POST /api/admin/chat/send/${sessionId}: Error parsing request body:`, error);
      return new NextResponse('Bad Request: Invalid JSON body.', { status: 400 });
  }

  // 4. Data Creation (Save Admin Message)
  try {
      // First, verify the chat session exists
      const chatSessionExists = await prisma.chatSession.findUnique({
          where: { id: sessionId },
          select: { id: true } // Only need to check existence
      });

      if (!chatSessionExists) {
          console.log(`POST /api/admin/chat/send/${sessionId}: Chat session not found`);
          return new NextResponse('Not Found: Chat session not found', { status: 404 });
      }

      // Create the new message with sender set to 'admin'
      const newAdminMessage = await prisma.chatMessage.create({
          data: {
              sessionId: sessionId,
              sender: 'admin', // Set sender explicitly
              message: messageText.trim(), // Trim whitespace
              timestamp: new Date(),
              // id will be auto-generated by Prisma based on schema (cuid)
              // isReadByAdmin is not relevant for admin messages
          }
      });

      console.log(`POST /api/admin/chat/send/${sessionId}: Admin message saved successfully:`, newAdminMessage);

      // 5. Response
      // Return the newly created message object
      return NextResponse.json(newAdminMessage, { status: 201 }); // 201 Created

  } catch (error) {
      console.error(`POST /api/admin/chat/send/${sessionId}: Error saving admin message:`, error);
      return new NextResponse('Internal Server Error', { status: 500 });
  }
}
