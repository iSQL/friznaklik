# docker-compose.dev.yml (Development Configuration)
# Builds the 'app' service locally

version: '3.8'

services:
  app:
    # Build the image using the Dockerfile in the current directory
    build:
      context: . 
      args:
        # Pass build-time args needed by your Dockerfile
        # Ensure these are defined in your .env file for local builds
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        PUBLIC_SITE_URL: ${PUBLIC_SITE_URL}
        GOOGLE_API_KEY: ${GOOGLE_API_KEY} # If needed by build process
    container_name: friznaklik_app_dev # Use a distinct name for dev
    restart: unless-stopped # Changed from always for dev
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      db: # Ensure DB is ready before app starts
        condition: service_healthy # Use healthcheck from base compose file
    environment:
      # Runtime Environment Variables (loaded from .env)
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} # Still needed at runtime
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      NEXT_PUBLIC_CLERK_DOMAIN: ${NEXT_PUBLIC_CLERK_DOMAIN}
      PUBLIC_SITE_URL: ${PUBLIC_SITE_URL} # Still needed at runtime
      GOOGLE_API_KEY: ${GOOGLE_API_KEY} # Needed at runtime
      CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET} 
      NODE_ENV: development # Explicitly set for dev
    volumes:
      # Optional: Mount source code for hot-reloading during development
      # This requires node_modules NOT to be mounted to avoid conflicts
      # Ensure your Dockerfile handles node_modules correctly in dev vs prod stages if using this
      # - .:/app 
      # - /app/node_modules # Anonymous volume to prevent host node_modules overwrite
      # - /app/.next # Prevent host .next overwrite
      [] # No volumes needed; using an empty array
# No need to redefine volumes here, they are inherited from the base file
