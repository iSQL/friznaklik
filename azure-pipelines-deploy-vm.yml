
name: FrizNaKlik - Deploy on agent

trigger:
  none 

variables:
  VM_PROJECT_PATH: '/var/www/friznaklik' 
  APP_NAME: 'friznaklik-app' 

pool:
  name: 'Default' # *** IMPORTANT: Replace with the name of the pool containing your VM's agent ***

stages:
- stage: DeployToVM
  displayName: 'Deploy Application to Ubuntu VM'
  jobs:
  - job: Deploy
    displayName: 'Deploy using Docker Compose'
    steps:
    - checkout: self
      path: s 
    - task: Bash@3
      displayName: 'Create .env file on VM Agent'
      inputs:
        targetType: 'inline'
        script: |
          ENV_FILE_PATH="$(Agent.BuildDirectory)/s/.env"
          echo "Creating .env file at ${ENV_FILE_PATH}"
          # Ensure the file is empty before writing
          > "${ENV_FILE_PATH}" 
          echo "POSTGRES_USER=$(POSTGRES_USER)" >> "${ENV_FILE_PATH}"
          echo "POSTGRES_PASSWORD=$(POSTGRES_PASSWORD)" >> "${ENV_FILE_PATH}"
          echo "POSTGRES_DB=$(POSTGRES_DB)" >> "${ENV_FILE_PATH}"
          echo "DATABASE_URL=postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?schema=public" >> "${ENV_FILE_PATH}"
          
          # Clerk Runtime Variables
          echo "CLERK_SECRET_KEY=$(CLERK_SECRET_KEY)" >> "${ENV_FILE_PATH}"
          echo "CLERK_WEBHOOK_SECRET=$(CLERK_WEBHOOK_SECRET)" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_DOMAIN=$(NEXT_PUBLIC_CLERK_DOMAIN)" >> "${ENV_FILE_PATH}" 
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$(NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY)" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_SITE_URL= $(NEXT_PUBLIC_SITE_URL)" >> "${ENV_FILE_PATH}" 

          # Other Runtime Variables
          echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL==/sign-up" >> "${ENV_FILE_PATH}"
          echo "GOOGLE_API_KEY="$(GOOGLE_API_KEY) >> "${ENV_FILE_PATH}"

          echo ".env file created successfully."
          echo "Contents (excluding secrets for security):" 
          grep -ivE 'SECRET|PASSWORD|KEY' "${ENV_FILE_PATH}" || echo "No non-secret lines found."
        failOnStderr: false 

    - script: |
        cd $(Build.SourcesDirectory)
        pnpm install --frozen-lockfile
      displayName: 'Install Dependencies (pnpm install)'

    - script: |
        cd $(Build.SourcesDirectory)
        pnpm exec prisma generate
      displayName: 'Prisma Generate Client'

    - script: |
        cd $(Build.SourcesDirectory)
        echo "Building Next.js application with NODE_ENV=$(NODE_ENV)..."
        pnpm build
      displayName: 'Build Next.js Application (pnpm build)'
      env:
        NODE_ENV: 'production'
    - task: CopyFiles@2
      displayName: 'Prepare Artifact: Copy Files to Staging Directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          .next/**
          public/**
          node_modules/**
          package.json
          pnpm-lock.yaml
          next.config.ts
          .env
          prisma/schema.prisma
        TargetFolder: '$(VM_PROJECT_PATH)'
        CleanTargetFolder: true
        OverWrite: true
    - task: Bash@3
      displayName: 'Run Prisma Database Migrations on VM'
      inputs:
        targetType: 'inline'
        script: |
          echo "Running Prisma migrations using DATABASE_URL from .env file..."
          pnpm exec prisma migrate deploy
          echo "Prisma migrations applied."
        failOnStderr: true
        workingDirectory: '$(VM_PROJECT_PATH)'

    - task: Bash@3
      displayName: 'Start/Restart Application with pm2'
      inputs:
        targetType: 'inline'
        script: |
          echo "Managing application with pm2: $(APP_NAME)"
          
          pm2 describe $(APP_NAME) > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "Application '$(APP_NAME)' is already running. Restarting..."
            pm2 restart $(APP_NAME) --update-env
          else
            echo "Application '$(APP_NAME)' not found by pm2. Starting new process..."
            pm2 start pnpm --name "$(APP_NAME)" --interpreter none -- start
          fi
          pm2 save
          echo "Application $(APP_NAME) started/restarted successfully."
          pm2 list
        failOnStderr: false
        workingDirectory: '$(VM_PROJECT_PATH)'