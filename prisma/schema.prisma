// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid()) // Clerk user ID
  clerkId       String          @unique // Store Clerk's user ID
  name          String?
  email         String          @unique
  role          String          @default("user") // 'user', 'admin'
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  appointments  Appointment[]
  chatSessions  ChatSession[]
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  duration    Int           // Duration in minutes
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      String    @default("pending") // 'pending', 'approved', 'rejected', 'cancelled', 'completed'
  adminNotes  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Optional: For managing specific stylist availability if applicable
// model AvailabilitySlot {
//   id          String   @id @default(cuid())
//   dayOfWeek   Int      // 0 for Sunday, 1 for Monday, etc.
//   startTime   String   // e.g., "09:00"
//   endTime     String   // e.g., "17:00"
//   stylistId   String?  // Link to User if tracking stylist availability
//   stylist     User?    @relation("StylistAvailability", fields: [stylistId], references: [id])
// }

model ChatSession {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      ChatMessage[]
}

model ChatMessage {
  id            String       @id @default(cuid())
  sessionId     String
  session       ChatSession  @relation(fields: [sessionId], references: [id])
  sender        String       // 'user', 'ai', 'admin'
  message       String
  timestamp     DateTime     @default(now())
  isReadByAdmin Boolean      @default(false) // To indicate if admin has seen the message
}
