// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
              id              String        @id @default(cuid())
              name            String
              description     String?
              ownerId         String        @unique // A user can own only one vendor initially
              owner           User          @relation("VendorOwner", fields: [ownerId], references: [id])
              address         String?
              phoneNumber     String?
              operatingHours  Json?         // e.g., {"monday": {"open": "09:00", "close": "18:00"}, ...}

              services        Service[]     // Relation to services offered by this vendor
              //workers         Worker[]      // Relation to workers at this vendor (defined in Phase 2)
              appointments    Appointment[] // Relation to appointments for this vendor

              createdAt       DateTime      @default(now())
              updatedAt       DateTime      @updatedAt
            }

model User {
              id          String    @id @default(cuid())
              clerkId     String    @unique
              name        String?
              email       String    @unique
              role        String    @default("user") // Will be refined: 'user', 'vendor_owner', 'superadmin'
              createdAt   DateTime  @default(now())
              updatedAt   DateTime  @updatedAt

              appointments Appointment[]
              chatSessions ChatSession[]
              ownedVendor  Vendor?     @relation("VendorOwner")
              // Add relation for worker if a user can be a worker (Phase 2)
              // workerProfile Worker? @relation("WorkerUser")
            }

model Service {
              id            String        @id @default(cuid())
              name          String
              description   String?
              duration      Int
              price         Float
              createdAt     DateTime      @default(now())
              updatedAt     DateTime      @updatedAt

              vendorId      String        // New: Foreign Key
              vendor        Vendor        @relation(fields: [vendorId], references: [id])

              appointments  Appointment[]
              // @@index([vendorId]) // Optional: Add index if you query services by vendor often
            }

 model Appointment {
              id            String    @id @default(cuid())
              userId        String
              user          User      @relation(fields: [userId], references: [id])
              serviceId     String
              service       Service   @relation(fields: [serviceId], references: [id])
              startTime     DateTime
              endTime       DateTime
              status        String    @default("pending") // e.g., pending, approved, rejected, cancelled, completed
              adminNotes    String?
              createdAt     DateTime  @default(now())
              updatedAt     DateTime  @updatedAt

              vendorId      String    // New: Foreign Key
              vendor        Vendor    @relation(fields: [vendorId], references: [id])

              // workerId      String?   // To be added in Phase 2
              // worker        Worker?   // To be added in Phase 2 @relation(fields: [workerId], references: [id])
              // @@index([vendorId]) // Optional
              // @@index([workerId]) // Optional (Phase 2)
 }

model ChatSession {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      ChatMessage[]
}

model ChatMessage {
  id            String       @id @default(cuid())
  sessionId     String
  session       ChatSession  @relation(fields: [sessionId], references: [id])
  sender        String       // 'user', 'ai', 'admin'
  message       String
  timestamp     DateTime     @default(now())
  isReadByAdmin Boolean      @default(false) // To indicate if admin has seen the message
}
