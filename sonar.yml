

pool:
  name: 'Default'

variables:
  sonarCloudServiceConnection: 'Sonar Cloud' # Your SonarCloud service connection name
  sonarProjectKey: 'ZabariServer_FrizNaKlik'
  sonarOrganization: 'zabariserver'
  SONAR_TOKEN: 'f95e70c7cace62e7f44033e13ae463ce1ca52316' # Define as a secret in pipeline variables for security
  # Instead, define SONAR_TOKEN as a secret variable in your Azure DevOps pipeline UI settings.
  # The SonarCloud tasks will automatically pick it up if named SONAR_TOKEN.
  # If you must define it here and it's not a secret variable in UI, it would be:
  SONAR_TOKEN_PLAINTEXT: 'f95e70c7cace62e7f44033e13ae463ce1ca52316'
  # And then ensure SonarCloudPrepare's env mapping uses it, though it's best to use the standard SONAR_TOKEN secret.

stages:
- stage: BuildAndAnalyze
  displayName: 'Build and Analyze with SonarCloud'
  jobs:
  - job: SonarCloudAnalysis
    displayName: 'Run SonarCloud Analysis'
    steps:

    - script: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
      displayName: 'Install Dependencies (pnpm)'
      workingDirectory: '$(Build.SourcesDirectory)'

    - task: SonarCloudPrepare@2
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'Sonar Cloud'
        organization: 'zabariserver'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'ZabariServer_FrizNaKlik'
        cliProjectName: 'FrizNaKlik'
        cliSources: '.'
        # Ensure SONAR_TOKEN is available as an environment variable for this task
        # If you've set it as a secret variable named SONAR_TOKEN in the pipeline UI,
        # it should be automatically available.
        # If you used SONAR_TOKEN_PLAINTEXT above (not recommended), you might need:
        # env:
        #   SONAR_TOKEN: $(SONAR_TOKEN_PLAINTEXT)
        # extraProperties: |
        #   sonar.sources=src
        #   sonar.typescript.tsconfigPath=tsconfig.json

#    - script: |
 #       pnpm build
  #    displayName: 'Build Project'
   #   workingDirectory: '$(Build.SourcesDirectory)'
    #  condition: succeeded()

    - task: SonarCloudAnalyze@2
      displayName: 'Run SonarCloud Analysis'
      # SONAR_TOKEN should be available from the prepare step or pipeline secret variables

    - task: SonarCloudPublish@2
      displayName: 'Publish SonarCloud Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'