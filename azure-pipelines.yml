trigger:
- none # Or your primary branch

variables:
  dockerHubServiceConnection: 'SCDocker' 
  dockerHubUsername: 'maremilojkovic' 
  imageName: 'friznaklik' 
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  VM_PROJECT_PATH: '/var/www/friznaklik'


stages:
- stage: BuildAndPushToDockerHub
  displayName: 'Build and Push Docker Image to Docker Hub'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    pool:
      name: 'Default' # Ensure this is your correct agent pool
    steps:
    # --- START DEBUG STEP ---
    - script: |
        echo "Build.SourcesDirectory value is: $(Build.SourcesDirectory)"
        echo "Listing contents of Build.SourcesDirectory:"
        ls -la "$(Build.SourcesDirectory)" 
      displayName: 'Debug Print Build Context Path'
    # --- END DEBUG STEP ---

    - task: Docker@2
      displayName: 'Build image' 
      inputs:
        command: 'build' 
        containerRegistry: '$(dockerHubServiceConnection)' 
        repository: '$(dockerHubUsername)/$(imageName)' 
        dockerfile: '$(dockerfilePath)'
        tags: | # Tags to apply to the built image locally
          $(tag)
          latest
        buildContext: '$(Build.SourcesDirectory)' # This should be the path argument Docker needs
        # --- Re-added arguments on a single line ---
        #arguments: '--build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$(NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY) --build-arg DATABASE_URL=postgresql://${PG_USER}:${PG_PASSWORD}@db:5432/${PG_DB}?schema=public --build-arg NEXT_PUBLIC_SITE_URL=$(NEXT_PUBLIC_SITE_URL)'
        arguments: '--build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$(NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY) --build-arg NEXT_PUBLIC_CLERK_DOMAIN=$(NEXT_PUBLIC_CLERK_DOMAIN) --build-arg NEXT_PUBLIC_SITE_URL=$(NEXT_PUBLIC_SITE_URL)'

    - task: Docker@2
      displayName: 'Push image to Docker Hub' 
      inputs:
        command: 'push' 
        containerRegistry: '$(dockerHubServiceConnection)' 
        repository: '$(dockerHubUsername)/$(imageName)' 
        tags: | # Specify which tags to push
          $(tag)
          latest
        # No need for dockerfile, buildContext, or arguments for push

    - task: Bash@3
      displayName: 'Create .env file on VM Agent'
      # Map pipeline variables (including secrets) to environment variables for the script
      env:
        DATABASE_URL: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@db:5432/$$(POSTGRES_DB)?schema=public
      inputs:
        targetType: 'inline'
        script: |
          ENV_FILE_PATH="$(Agent.BuildDirectory)/s/.env"
          echo "Creating .env file at ${ENV_FILE_PATH}"
          > "${ENV_FILE_PATH}" 
          echo "DATABASE_URL=${DATABASE_URL}" >> "${ENV_FILE_PATH}"

          # Clerk Runtime Variables
          echo "CLERK_SECRET_KEY=$(CLERK_SECRET_KEY_SECRET)" >> "${ENV_FILE_PATH}"
          echo "CLERK_WEBHOOK_SECRET=$(CLERK_WEBHOOK_SECRET)" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_DOMAIN=$(NEXT_PUBLIC_CLERK_DOMAIN)" >> "${ENV_FILE_PATH}" 
          echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard" >> "${ENV_FILE_PATH}"
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$(NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY)" >> "${ENV_FILE_PATH}"

          # Other Runtime Variables
          echo "NEXT_PUBLIC_SITE_URL=$(NEXT_PUBLIC_SITE_URL)" >> "${ENV_FILE_PATH}" 
          echo "GOOGLE_API_KEY="$(GOOGLE_API_KEY) >> "${ENV_FILE_PATH}"

          # Add optional ports if mapped in env:
          # if [ -n "${PG_PORT}" ]; then echo "POSTGRES_PORT=${PG_PORT}" >> "${ENV_FILE_PATH}"; fi
          # if [ -n "${APP_PORT}" ]; then echo "APP_PORT=${APP_PORT}" >> "${ENV_FILE_PATH}"; fi

          echo ".env file created successfully."
          echo "Contents (excluding secrets for security):" # Avoid printing secrets
          # Use grep with -i for case-insensitivity, add KEY to exclusion
          grep -ivE 'SECRET|PASSWORD|KEY' "${ENV_FILE_PATH}" || echo "No non-secret lines found."
        failOnStderr: false # Fail if any command writes to stderr
    - task: CopyFiles@2
      displayName: 'Copy deployment files to target VM path'
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)/s' # Where checkout and .env happened
        Contents: |
          docker-compose.yml
          docker-compose.prod.yml
          .env
        TargetFolder: '$(VM_PROJECT_PATH)'
        OverWrite: true
        
    - task: Bash@3
      displayName: 'Pull latest images and restart containers'
      inputs:
        targetType: 'inline'
        script: |
          echo "Attempting to navigate to project directory: $(VM_PROJECT_PATH)"
          cd $(VM_PROJECT_PATH) || { echo "Failed to change directory to $(VM_PROJECT_PATH)"; exit 1; }

          echo "Current directory is: $(pwd)" # <-- DEBUG: Print current directory
          echo "Listing files in current directory:" # <-- DEBUG: List files
          ls -la # <-- DEBUG: Check if docker-compose.yml and .env are present

          echo "Checking if docker-compose.yml exists..." # <-- DEBUG: Explicit check
          if [ ! -f docker-compose.yml ]; then
            echo "ERROR: docker-compose.yml not found in $(pwd)"
            exit 1
          fi
          echo "Checking if .env exists..." # <-- DEBUG: Explicit check
          if [ ! -f .env ]; then
            echo "ERROR: .env not found in $(pwd)"
            exit 1
          fi
          echo "Displaying .env contents (excluding secrets) from target directory:"
          grep -ivE 'SECRET|PASSWORD|KEY' .env || echo "No non-secret lines found in target .env"


          echo "Logging into Docker Hub (if needed for private images - requires Docker login setup on VM or service connection usage)"
          # docker login -u $(dockerHubUsername) -p $(DockerHubPassword) # Example if needed

          echo "Pulling latest images specified in docker-compose.yml..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull # Pulls images defined in docker-compose.yml, including your app image

          echo "Stopping and removing old containers (if any)..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down # Stops and removes containers, networks defined in the compose file

          echo "Starting new containers in detached mode..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d # Starts containers based on the latest images and the .env file

          echo "Deployment containers started."
        failOnStderr: false

    - task: Bash@3
      displayName: 'Apply Database Migrations'
      inputs:
        targetType: 'inline'
        script: |
          echo "Waiting a few seconds for services to stabilize..."
          sleep 10 
          
          echo "Navigating to project directory: $(VM_PROJECT_PATH)"
          cd $(VM_PROJECT_PATH) || { echo "Failed to change directory to $(VM_PROJECT_PATH)"; exit 1; }
          echo "Running Prisma migrations inside the app container..."
          # Use docker-compose exec to run the command inside the 'app' service container
          # The -T flag disables pseudo-tty allocation, often needed for non-interactive exec commands
          #docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T app pnpm exec prisma migrate deploy
          docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T app npx prisma migrate deploy #Use npx until dockerfile is updated with working pnpm 
          echo "Prisma migrations applied."
        failOnStderr: false